[tool:pytest]
# pytest configuration for GeminiSDR

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Minimum version
minversion = 6.0

# Add options
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-branch
    --cov-fail-under=80
    --durations=10
    --maxfail=5

# Markers
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    gpu: marks tests that require GPU (CUDA or MPS)
    cuda: marks tests that specifically require CUDA
    mps: marks tests that specifically require MPS
    hardware: marks tests that require real hardware (SDR, etc.)
    integration: marks tests as integration tests
    performance: marks tests as performance benchmarks
    stability: marks tests as long-running stability tests
    unit: marks tests as unit tests
    smoke: marks tests as smoke tests (quick validation)
    regression: marks tests for regression testing
    timeout: marks tests with specific timeout requirements

# Test timeout (in seconds)
timeout = 300
timeout_method = thread

# Warnings
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    # Ignore specific PyTorch warnings
    ignore:.*torch.distributed.*:UserWarning
    ignore:.*torch.jit.*:UserWarning
    # Ignore MLflow warnings
    ignore:.*mlflow.*:UserWarning
    # Ignore PyQtGraph compatibility warnings
    ignore:.*_sizeHint.*:AttributeError
    ignore:.*LabelItem.*:AttributeError

# Coverage configuration
[coverage:run]
source = geminisdr
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */.venv/*
    */build/*
    */dist/*
    */docs/*
    */examples/*
    */scripts/*
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml